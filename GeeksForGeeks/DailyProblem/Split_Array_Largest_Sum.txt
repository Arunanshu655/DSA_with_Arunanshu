Topics: Binary Search, Greedy

class Solution {
    public boolean isPossible(int[] nums, int mid, int k){
        int sum  = 0 , cnt = 1, n = nums.length;
        for(int i = 0 ; i < n ; i++){  // ---O(n)
            if(nums[i]>mid) return false;
            sum += nums[i];
            if(sum>mid){
                cnt++;
                sum = nums[i];
            }
        }
        return (cnt<=k); // ---O(n)
    }
    public int splitArray(int[] arr, int k) {
        // code here
        int sum = 0 ;
        for(int a : arr) sum += a; // ---O(n)
        int l = arr[0] , r = sum;
        int ans = -1;
        while(l<=r){ // ---O(logn)
            int mid = l + (r - l)/2;
            if(isPossible(arr, mid, k)){ // ---O(n) * O(logn)
                ans = mid;
                r = mid-1;
            } 
            else l = mid+1;
        }
        return ans; // ---O(nlogn)
    }
};

Time Complexity: O(nlogn);
Auxiliary Space: O(1);

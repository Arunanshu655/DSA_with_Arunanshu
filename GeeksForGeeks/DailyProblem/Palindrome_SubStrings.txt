Topics: Dynamic Programming

class Solution {
    public int countPS(String s) {
        // code here
        int n = s.length(), ans = 0;
        
        for(int i = 0 ; i < n ; i++){
            int l = i - 1, len = 1;
            int r = i + 1;
            // StringBuilder sb1 = new StringBuilder(s.charAt(i));
            while(l>=0 && r <n && s.charAt(l)==s.charAt(r)){
                ans++;
                // sb1.insert(0,s.charAt(l));
                // sb1.append(s.charAt(r));
                l--;
                r++;
                
            }
            // if(sb1.length()>1) System.out.println(sb1);
            l = i;
            r = i+1;
            len = 0;
            // StringBuilder sb2 = new StringBuilder("");
            while(l>=0 && r <n && s.charAt(l)==s.charAt(r)){
                ans++;
                // sb2.insert(0,s.charAt(l));
                // sb2.append(s.charAt(r));
                l--;
                r++;
                
            }
            // if(sb2.length()>0) System.out.println(sb2);
        }
        
        return ans;
    }
}

Time Complexity: O(n^2)
Auxiliary Space: O(1)

Topics: Prefix-sum, inclusion-exclusion

class Solution {
    public ArrayList<ArrayList<Integer>> applyDiff2D(int[][] mat, int[][] opr) {
        // code here
        int n = mat.length , m = mat[0].length ;
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>(n);
        for (int i = 0; i < n; i++) {
            ArrayList<Integer> row = new ArrayList<>();
            for (int j = 0; j < m; j++) {
                row.add(0);
            }
            ans.add(row);
        }
        int[][] temp = new int[n][m]; 
        for(int[] op : opr){
            int val = op[0];
            int r1 = op[1];
            int c1 = op[2];
            int r2 = op[3];
            int c2 = op[4];
            
            if (r1 >= 0 && c1 >= 0 && r1 < n && c1 < m) temp[r1][c1] += val;
            if (r1 >= 0 && (c2 + 1) < m) temp[r1][c2 + 1] -= val;
            if ((r2 + 1) < n && c1 < m) temp[r2 + 1][c1] -= val;
            if ((r2 + 1) < n && (c2 + 1) < m) temp[r2 + 1][c2 + 1] += val;
        }
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                if(i-1>=0) temp[i][j] += temp[i-1][j];
                if(j-1>=0) temp[i][j] += temp[i][j-1];
                if (i - 1 >= 0 && j - 1 >= 0) temp[i][j] -= temp[i - 1][j - 1];
                
                mat[i][j] += temp[i][j];
            }
        }
        for(int i = 0 ; i < n ; i++){
            for(int j = 0 ; j < m ; j++){
                ans.get(i).set(j,mat[i][j]);
            }
        }
        return ans;
        
    }
}

Time Complexity: O(n * m)
Auxiliary Space: O(n * m)

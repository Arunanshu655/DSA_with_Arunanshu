Topics: Dynamic Programming

class Solution {
    public int nonLisMaxSum(int[] arr) {
        // code here
        int n = arr.length;
        int[] len = new int[n];
        int[] sum = new int[n];
        int maxLen = 1, totalSum = arr[0];
        Arrays.fill(len,1);
        sum[0] = arr[0];
        for(int i = 1 ; i <n ; i++){
            totalSum += arr[i];
            sum[i] = arr[i];
            for(int j = 0 ; j < i ; j++){
                if(arr[j]<arr[i] && len[j]+1>=len[i]){
                    len[i] = len[j] + 1;
                    sum[i] = arr[i] + sum[j];
                    maxLen = Math.max(len[i],maxLen);
                }
            }
        }
        
        int minSum = Integer.MAX_VALUE;  // min sum for lIS
        
        for(int i = 0 ; i < n ; i++) if(len[i] == maxLen) minSum = Math.min(sum[i],minSum);
        
        return (totalSum - minSum);
     }
}

Time Complexity: O(n^2);
Auxiliary Space: O(n);

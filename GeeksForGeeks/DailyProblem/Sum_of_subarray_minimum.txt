Topics: Stack, Counting

class Solution {
    public void findPse(int[] arr,int[] nse){
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        
        for(int i = 0 ; i < n ; i++){
            while(!st.isEmpty() && arr[i]<arr[st.peek()]) st.pop();
            
            nse[i] = st.isEmpty() ? -1 : st.peek();
            
            st.push(i);
        }
        return;
    }
    public void findNse(int[] arr,int[] nse){
        Stack<Integer> st = new Stack<>();
        int n = arr.length;
        
        for(int i = n - 1 ; i >= 0 ; i--){
            while(!st.isEmpty() && arr[i]<=arr[st.peek()]) st.pop();
            
            nse[i] = st.isEmpty() ? n : st.peek();
            
            st.push(i);
        }
        return;
    }
    public int sumSubMins(int[] arr) {
        // code here
        int n = arr.length , total = 0;
        int[] nse = new int[n]; // -- O(n)
        int[] pse = new int[n];// -- O(n)
        
        findNse(arr,nse); // -- O(n)
        findPse(arr,pse);// -- O(n)
        
        // To verify your nse && pse arrays 
        // for(int a : nse) System.out.print(a + " ");
        // for(int a : pse) System.out.print(a + " ");
        for(int i = 0 ; i < n ; i++){
            int left = i - pse[i];
            int right = nse[i] - i;
            
            total += (left * right * arr[i]);
        }
        
        return total; // -- O(n)
    }
}

Time Complexity: O(n);
Auxiliary Space: O(n);

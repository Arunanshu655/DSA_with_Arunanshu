Topics: Binary Search, Sorting

//Method 1 
class Solution {
    public boolean isPos(int[] citations, int mid){
        int cnt = 0;
        for(int citation : citations) if(citation>=mid) cnt++;
        return(cnt>=mid);
    }
    public int hIndex(int[] citations) {
        // code here
        int n = citations.length;
        int l = 0 , h = n, ans = 0;
        while(l<=h){
            int mid = l +(h-l)/2;
            if(isPos(citations,mid)){
                l = mid+1;
                ans = mid;
            }else{
                h = mid - 1;
            }
        }
        return ans;
    }
}

Time Complexity: O(nlogn)
Auxiliary Space: O(1)

//Method 2

class Solution {
    // Function to find hIndex
    public int hIndex(int[] citations) {
        // code here
        Arrays.sort(citations);
        int n = citations.length;
        int[] ans = new int[n+1];
        Arrays.fill(ans,0);
        for(int cites : citations){
            ans[Math.min(cites,n)]++;
        }
        int count = 0;
        for(int i = n ; i >=0 ; i--){
            count += ans[i];
            if(count>=i)return i;
        }
        
        
        return 0;
    }
}

Time Complexity: O(n)
Auxiliary Space: O(n)

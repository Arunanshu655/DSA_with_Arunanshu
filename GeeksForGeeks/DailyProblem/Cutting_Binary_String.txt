Topics: Dynamic Programming, Bit magic

class Solution {
    public int solve(int i, String s, HashSet<Integer> set, int[] dp){
        if(i == s.length()) return 0;
        
        if(dp[i] != -1) return dp[i];
        int res = s.length()+1, num = 0;
        for(int j = i ; j < s.length() ; j++){
            num = num * 2 + (int)(s.charAt(j)-'0');
            if(s.charAt(i) != '0' && set.contains(num)){
                res = Math.min(res, 1 + solve(j+1,s,set,dp));
            }
        }
        return dp[i] = res;
    }
    public int cuts(String s) {
        // code here
        if(s.charAt(0)=='0') return -1;
        int[] dp = new int[s.length()];
        Arrays.fill(dp,-1);
        HashSet<Integer> set = new HashSet<>();
        for(int i = 1 ; i <= 1000000000 ; i *=5) set.add(i);
        int ans = solve(0,s,set,dp);
        return  ans > s.length() ? -1 : ans;
    }
}

Time Complexity: O(n^2)
Auxiliary Space: O(n)

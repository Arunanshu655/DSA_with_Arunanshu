Topics: Dynamic Programming 

class Solution {
    public int solve(int i , int j , int[][] keyPad, int n, int[][][] dp){
        if(i>3 || j >2 || i<0 || j <0) return 0;
        if(keyPad[i][j]==-1) return 0;
        if(n==0) return 1;
        if(dp[i][j][n]!=-1) return dp[i][j][n];
        int ans = 0 ; 
        ans += solve(i,j,keyPad,n-1,dp);
        ans += solve(i+1,j,keyPad,n-1,dp);
        ans += solve(i,j+1,keyPad,n-1,dp);
        ans += solve(i,j-1,keyPad,n-1,dp);
        ans += solve(i-1,j,keyPad,n-1,dp);
        
        return dp[i][j][n] = ans;
    }
    public int getCount(int n) {
        // code here
        int[][] keyPad = new int[4][3];
        keyPad[3][0] = -1;
        keyPad[3][2] = -1;
        int ans = 0;
        int[][][] dp = new int[4][3][n + 1];
        for (int[][] d1 : dp)
            for (int[] d2 : d1)
                Arrays.fill(d2, -1);
        for(int i = 0 ; i <4 ; i ++){
            for(int j = 0 ; j < 3 ; j++)
            ans += solve(i,j,keyPad,n-1,dp);
        }
        return ans;
    }
}


Time Complexity: O(n);
Auxiliary Space: O(n);

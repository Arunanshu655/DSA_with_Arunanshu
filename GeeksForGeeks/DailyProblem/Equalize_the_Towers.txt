Topics: Arrays, Binary Search

class Solution {
    private int n;
    public int getCost(int[] heights, int[] cost, int h){
        int c = 0;
        for(int i = 0 ; i < n ; i++){
            c += Math.abs(heights[i]-h) * cost[i];
        }
        return c;
    }
    public int minCost(int[] heights, int[] cost) {
        // code here
        int max = heights[0];
        int min = heights[0];
        n = heights.length;
        for(int height : heights){
            max = Math.max(max,height);
            min = Math.min(min,height);
        }
        int minCost = Integer.MAX_VALUE ;
        int l = min , r = max;
        while(l<=r){
            int mid1 = l + (r-l)/3;
            int mid2 = r - (r-l)/3;
            
            int cost1 = getCost(heights, cost, mid1);
            int cost2 = getCost(heights, cost, mid2);
            
            minCost = Math.min(minCost,Math.min(cost1,cost2));
            
            if(cost1<cost2){
                r = mid2 - 1;
            }else l = mid1 + 1;
        }
        return minCost;
    }
}

Time Complexity: O(nlog(max(array)))
Auxiliary Space: O(1)

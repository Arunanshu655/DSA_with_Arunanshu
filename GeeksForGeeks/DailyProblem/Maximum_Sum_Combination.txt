Topics: Arrays, sorting, Heap

class Solution {
    public ArrayList<Integer> topKSumPairs(int[] a, int[] b, int k) {
        // code here
        Arrays.sort(a);
        Arrays.sort(b);
        int n = a.length;
        ArrayList<Integer> ans = new ArrayList<>();
        HashSet<String> visited = new HashSet<>();
        int[] doub = new int[2 * n];
        int idx = 0 , cnt = 0;
        int k1 = n - 1 , k2 = n - 1;
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            (c,d)->((a[d[0]] + b[d[1]]) - (a[c[0]] + b[c[1]]))
            );
        pq.add(new int[]{n - 1, n - 1});
        visited.add((n - 1) + "," + (n - 1));
        while (k-- > 0 && !pq.isEmpty()) {
            int[] top = pq.poll();
            int i = top[0], j = top[1];
            ans.add(a[i] + b[j]);
            
            if (i - 1 >= 0 && visited.add((i - 1) + "," + j)) {
                pq.add(new int[]{i - 1, j});
            }
            if (j - 1 >= 0 && visited.add(i + "," + (j - 1))) {
                pq.add(new int[]{i, j - 1});
            }
        }
        
        return ans;
    }
}


Time Complexity: O(nlogn);
Auxiliary Space: O(n);

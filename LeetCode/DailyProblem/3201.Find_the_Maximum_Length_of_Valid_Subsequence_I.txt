Topics: Dynamic Programming

class Solution {
    public int maximumLength(int[] nums) {
        int n = nums.length;
        int odds = 0, evens = 0 , sign = -1, alter = 0;
        for(int i = 0 ; i < n ; i++){
            int div = nums[i] % 2;
            if(div==1) odds++;
            if(div==0) evens++;

            if(sign == -1){
                alter = 1;
                if(div==1) sign = 1;
                else sign = 0;
            }else if(sign == 0 && div == 1){
                alter++;
                sign = 1;
            }else if(sign == 1 && div == 0){
                alter++;
                sign = 0;
            }
        }
        

        return Math.max(odds,Math.max(evens,alter));
    }
}

Time Complesity: O(n)
Auxiliary Space: O(1)

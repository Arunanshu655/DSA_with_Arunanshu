Topics: Bit Manipulation

class Solution {
    public String sortString(int n){
        int[] digits = new int[10];
        
        while(n>0){
            digits[n % 10]++;
            n /= 10;
        }

        StringBuilder sb = new StringBuilder("");
        for(int i = 0 ; i < 10 ; i++){
            for(int j = 0 ; j < digits[i] ; j++) sb.append((char)(i));
        }

        return sb.toString();
    }
    public boolean reorderedPowerOf2(int n) {
        String strN = sortString(n);
        
        int cnt = 1;
        for(int i = 1 ; cnt < 31 ; i *= 2 , cnt++){
            String str2 = sortString(i);
            if(strN.equals(str2)) return true;
        }

        return false;
    }
}

Time Complexity : O(logN)
Auxiliar Space : O(logN)

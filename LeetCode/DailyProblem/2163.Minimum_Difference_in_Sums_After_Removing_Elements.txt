Topics: Dynamic Programming, Heap

class Solution {
    public long minimumDifference(int[] nums) {
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,b)->(b-a));
        PriorityQueue<Integer> minHeap = new PriorityQueue<>((a,b)->(a-b));
         
        int n = nums.length/3;
        long[] left = new long[3 * n];
        //right half
        long sum = 0;
        for(int i = 3 * n - 1 ; i >= n ; i--){
           sum += nums[i];
           minHeap.add(nums[i]);
           if(minHeap.size()>n){
            sum -= minHeap.poll();
           }
           if(minHeap.size()==n) left[i] = sum;
        }

        //left half
        sum = 0;
        long ans = Long.MAX_VALUE;
        for(int i = 0 ; i < 2 * n ; i++){
           sum += nums[i];
           maxHeap.add(nums[i]);
           if(maxHeap.size()>n){
            sum -= maxHeap.poll();
           }
           if(maxHeap.size()==n) ans = Math.min(sum - left[i+1],ans);
        }
        return ans;
    }
}

Time Complexity: O(n);
Auxiliary Space: O(1);

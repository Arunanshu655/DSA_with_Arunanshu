Topics: Dynamic Programming

class Solution {
    public double solve(int a,int b, double[][] dp){
        if(a<=0 && b<=0) return 0.5;
        if(a<=0) return 1;
        if(b<=0) return 0;

        if(dp[a][b] != -1) return dp[a][b];
        dp[a][b] = 0;
        dp[a][b] += 0.25 * solve(a-100,b,dp);
        dp[a][b] += 0.25 * solve(a-75,b-25,dp);
        dp[a][b] += 0.25 * solve(a-50,b-50,dp);
        dp[a][b] += 0.25 * solve(a-25,b-75,dp);

        return dp[a][b];
    }
    public double soupServings(int n) {
        if(n>5000) return 1;

        double[][] dp = new double[n+1][n+1];
        for(double[] d : dp) Arrays.fill(d,-1);

        return solve(n,n,dp);
    }
}

Time COmplexity: O(n^2)
Auxiliary Space: O(n^2)

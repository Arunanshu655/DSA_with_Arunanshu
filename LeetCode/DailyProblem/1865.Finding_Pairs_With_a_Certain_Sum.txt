Topics: Design, HashTable

class FindSumPairs {
    private int[] nums1;
    private int[] nums2;
    private HashMap<Integer,Integer> freq;
    public FindSumPairs(int[] nums1, int[] nums2) {
        this.nums1 = nums1;
        this.nums2 = nums2;
        freq = new HashMap<>();
        for (int num : nums2) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
        }
    }
    
    public void add(int index, int val) {
        int oldVal = nums2[index];
        freq.put(oldVal,freq.getOrDefault(oldVal,0)-1);
        if(freq.get(oldVal)==0) freq.remove(oldVal);
        
        nums2[index] += val;
        int newVal = nums2[index];
        freq.put(newVal,freq.getOrDefault(newVal,0)+1);
    }
    
    public int count(int tot) {
        int cnt = 0;
        for(int num : nums1) if(freq.containsKey(tot-num)) cnt += freq.get(tot-num);
        return cnt;
    }
}


Time Comolexity: O(n) , O(1) , O(n);
Auxiliary Space: O(n);

Topics: Segment Tree

QS: Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

Code:
class NumArray {
    private int[] nums;
    private int n;
    private int[] seg;
    public int constructSeg(int si, int l, int r, int[] nums){
        if(l==r){
            seg[si] = nums[l];
            return seg[si];
        }

        int mid = (r+l)/2;
        seg[si] = (constructSeg(2 * si +1,l,mid,nums)+constructSeg(2 * si +2,mid+1,r,nums));
        return seg[si];
    }
    public NumArray(int[] nums) {
        this.nums = nums;
        n = nums.length;
        seg = new int[4 * n];
        constructSeg(0,0,n-1,nums);
    }
    
    public void updateSeg(int[] seg, int si, int sl, int sr,int index, int diff){
        if (index < sl || index > sr) return;
        seg[si] += diff;
        if (sl != sr) {
            int mid = (sl + sr) / 2;
            updateSeg(seg, 2 * si + 1, sl, mid, index, diff);
            updateSeg(seg, 2 * si + 2, mid + 1, sr, index, diff);
        }
    }
    public void update(int index, int val) {
        int diff = val - nums[index];
        nums[index] = val;
        updateSeg(seg, 0, 0, n - 1, index, diff);
    }
    
    public int findSum(int[] seg, int si, int sl, int sr, int l, int r){
            if(l>sr || r<sl) return 0;
            else if(r>=sr && l<=sl) return seg[si];
            else{
                int mid = (sl+sr)/2;
                return (findSum(seg,2 * si + 1,sl,mid,l,r)+findSum(seg,2 * si + 2,mid+1,sr,l,r));
            } 
    }
    public int sumRange(int left, int right) {
        return findSum(seg,0,0,n-1,left,right);
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */

Time Complexity: O(n), O(logn), O(logn)
Auxiliary Space: O(n)
